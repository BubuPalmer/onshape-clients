# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.108
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import
import re  # noqa: F401
import sys  # noqa: F401

import six  # noqa: F401

from onshape_client.oas.model_utils import (  # noqa: F401
    ModelComposed,
    ModelNormal,
    ModelSimple,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_get_composed_info,
)
try:
    from onshape_client.oas.models import integrations_params
except ImportError:
    integrations_params = sys.modules['onshape_client.oas.models.integrations_params']


class BTCompanyPoliciesParams(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    @staticmethod
    def openapi_types():
        """
        This must be a class method so a model may have properties that are
        of type self, this ensures that we don't create a cyclic import

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'require_totp': (bool,),  # noqa: E501
            'use_light_ui': (bool,),  # noqa: E501
            'integrations': (integrations_params.IntegrationsParams,),  # noqa: E501
            'require_approved_drawing_templates': (bool,),  # noqa: E501
            'approved_drawing_templates_document_id': (str,),  # noqa: E501
            'add_company_owned_libraries_in_user_account': (bool,),  # noqa: E501
            'release_workflow_id': (str,),  # noqa: E501
            'obsoletion_workflow_id': (str,),  # noqa: E501
            'revision_scheme_id': (str,),  # noqa: E501
            'require_revision_for_released_objects': (bool,),  # noqa: E501
            'require_part_number_for_released_objects': (bool,),  # noqa: E501
            'only_admins_can_edit_properties_of_released_objects': (bool,),  # noqa: E501
            'only_admins_can_delete_documents_containing_released_objects': (bool,),  # noqa: E501
            'only_admins_can_approve_releases': (bool,),  # noqa: E501
            'require_parts_and_subassemblies_release_with_assembly': (bool,),  # noqa: E501
            'require_parts_and_subassemblies_release_with_drawing': (bool,),  # noqa: E501
            'require_base_part_release_with_derived_part': (bool,),  # noqa: E501
            'require_image_release_with_drawing': (bool,),  # noqa: E501
            'action_show_drawings_watermark': (bool,),  # noqa: E501
            'hide_watermark_for_not_rev_managed': (bool,),  # noqa: E501
            'prevent_duplicate_document_name_regex': (str,),  # noqa: E501
            'error_on_feature_list_errors_during_release': (bool,),  # noqa: E501
            'error_on_rollback_bar_not_at_end_during_release': (bool,),  # noqa: E501
            'error_on_assembly_tree_errors_during_release': (bool,),  # noqa: E501
            'error_on_pending_context_edits_during_release': (bool,),  # noqa: E501
            'error_on_pending_drawing_update_during_release': (bool,),  # noqa: E501
            'error_on_pending_dangling_drawing_objects_during_release': (bool,),  # noqa: E501
            'approver_required_during_release': (bool,),  # noqa: E501
            'note_required_during_release': (bool,),  # noqa: E501
            'require_all_approvers': (bool,),  # noqa: E501
            'allow_release_items_from_other_documents': (bool,),  # noqa: E501
            'automatically_obsolete_previous_released_revisions': (bool,),  # noqa: E501
            'part_numbering_scheme_id': (str,),  # noqa: E501
            'require_peer_review': (bool,),  # noqa: E501
            'drawing_can_duplicate_part_number': (bool,),  # noqa: E501
            'enabled_active_multiple_workflows': (bool,),  # noqa: E501
            'use_company_features_toolbar': (bool,),  # noqa: E501
            'only_admins_can_mark_objects_as_not_revision_managed': (bool,),  # noqa: E501
        }

    @staticmethod
    def discriminator():
        return None

    attribute_map = {
        'require_totp': 'requireTotp',  # noqa: E501
        'use_light_ui': 'useLightUi',  # noqa: E501
        'integrations': 'integrations',  # noqa: E501
        'require_approved_drawing_templates': 'requireApprovedDrawingTemplates',  # noqa: E501
        'approved_drawing_templates_document_id': 'approvedDrawingTemplatesDocumentId',  # noqa: E501
        'add_company_owned_libraries_in_user_account': 'addCompanyOwnedLibrariesInUserAccount',  # noqa: E501
        'release_workflow_id': 'releaseWorkflowId',  # noqa: E501
        'obsoletion_workflow_id': 'obsoletionWorkflowId',  # noqa: E501
        'revision_scheme_id': 'revisionSchemeId',  # noqa: E501
        'require_revision_for_released_objects': 'requireRevisionForReleasedObjects',  # noqa: E501
        'require_part_number_for_released_objects': 'requirePartNumberForReleasedObjects',  # noqa: E501
        'only_admins_can_edit_properties_of_released_objects': 'onlyAdminsCanEditPropertiesOfReleasedObjects',  # noqa: E501
        'only_admins_can_delete_documents_containing_released_objects': 'onlyAdminsCanDeleteDocumentsContainingReleasedObjects',  # noqa: E501
        'only_admins_can_approve_releases': 'onlyAdminsCanApproveReleases',  # noqa: E501
        'require_parts_and_subassemblies_release_with_assembly': 'requirePartsAndSubassembliesReleaseWithAssembly',  # noqa: E501
        'require_parts_and_subassemblies_release_with_drawing': 'requirePartsAndSubassembliesReleaseWithDrawing',  # noqa: E501
        'require_base_part_release_with_derived_part': 'requireBasePartReleaseWithDerivedPart',  # noqa: E501
        'require_image_release_with_drawing': 'requireImageReleaseWithDrawing',  # noqa: E501
        'action_show_drawings_watermark': 'actionShowDrawingsWatermark',  # noqa: E501
        'hide_watermark_for_not_rev_managed': 'hideWatermarkForNotRevManaged',  # noqa: E501
        'prevent_duplicate_document_name_regex': 'preventDuplicateDocumentNameRegex',  # noqa: E501
        'error_on_feature_list_errors_during_release': 'errorOnFeatureListErrorsDuringRelease',  # noqa: E501
        'error_on_rollback_bar_not_at_end_during_release': 'errorOnRollbackBarNotAtEndDuringRelease',  # noqa: E501
        'error_on_assembly_tree_errors_during_release': 'errorOnAssemblyTreeErrorsDuringRelease',  # noqa: E501
        'error_on_pending_context_edits_during_release': 'errorOnPendingContextEditsDuringRelease',  # noqa: E501
        'error_on_pending_drawing_update_during_release': 'errorOnPendingDrawingUpdateDuringRelease',  # noqa: E501
        'error_on_pending_dangling_drawing_objects_during_release': 'errorOnPendingDanglingDrawingObjectsDuringRelease',  # noqa: E501
        'approver_required_during_release': 'approverRequiredDuringRelease',  # noqa: E501
        'note_required_during_release': 'noteRequiredDuringRelease',  # noqa: E501
        'require_all_approvers': 'requireAllApprovers',  # noqa: E501
        'allow_release_items_from_other_documents': 'allowReleaseItemsFromOtherDocuments',  # noqa: E501
        'automatically_obsolete_previous_released_revisions': 'automaticallyObsoletePreviousReleasedRevisions',  # noqa: E501
        'part_numbering_scheme_id': 'partNumberingSchemeId',  # noqa: E501
        'require_peer_review': 'requirePeerReview',  # noqa: E501
        'drawing_can_duplicate_part_number': 'drawingCanDuplicatePartNumber',  # noqa: E501
        'enabled_active_multiple_workflows': 'enabledActiveMultipleWorkflows',  # noqa: E501
        'use_company_features_toolbar': 'useCompanyFeaturesToolbar',  # noqa: E501
        'only_admins_can_mark_objects_as_not_revision_managed': 'onlyAdminsCanMarkObjectsAsNotRevisionManaged',  # noqa: E501
    }

    @staticmethod
    def _composed_schemas():
        return None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_from_server',
        '_path_to_item',
        '_configuration',
    ])

    def __init__(self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """bt_company_policies_params.BTCompanyPoliciesParams - a model defined in OpenAPI


        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            require_totp (bool): [optional]  # noqa: E501
            use_light_ui (bool): [optional]  # noqa: E501
            integrations (integrations_params.IntegrationsParams): [optional]  # noqa: E501
            require_approved_drawing_templates (bool): [optional]  # noqa: E501
            approved_drawing_templates_document_id (str): [optional]  # noqa: E501
            add_company_owned_libraries_in_user_account (bool): [optional]  # noqa: E501
            release_workflow_id (str): [optional]  # noqa: E501
            obsoletion_workflow_id (str): [optional]  # noqa: E501
            revision_scheme_id (str): [optional]  # noqa: E501
            require_revision_for_released_objects (bool): [optional]  # noqa: E501
            require_part_number_for_released_objects (bool): [optional]  # noqa: E501
            only_admins_can_edit_properties_of_released_objects (bool): [optional]  # noqa: E501
            only_admins_can_delete_documents_containing_released_objects (bool): [optional]  # noqa: E501
            only_admins_can_approve_releases (bool): [optional]  # noqa: E501
            require_parts_and_subassemblies_release_with_assembly (bool): [optional]  # noqa: E501
            require_parts_and_subassemblies_release_with_drawing (bool): [optional]  # noqa: E501
            require_base_part_release_with_derived_part (bool): [optional]  # noqa: E501
            require_image_release_with_drawing (bool): [optional]  # noqa: E501
            action_show_drawings_watermark (bool): [optional]  # noqa: E501
            hide_watermark_for_not_rev_managed (bool): [optional]  # noqa: E501
            prevent_duplicate_document_name_regex (str): [optional]  # noqa: E501
            error_on_feature_list_errors_during_release (bool): [optional]  # noqa: E501
            error_on_rollback_bar_not_at_end_during_release (bool): [optional]  # noqa: E501
            error_on_assembly_tree_errors_during_release (bool): [optional]  # noqa: E501
            error_on_pending_context_edits_during_release (bool): [optional]  # noqa: E501
            error_on_pending_drawing_update_during_release (bool): [optional]  # noqa: E501
            error_on_pending_dangling_drawing_objects_during_release (bool): [optional]  # noqa: E501
            approver_required_during_release (bool): [optional]  # noqa: E501
            note_required_during_release (bool): [optional]  # noqa: E501
            require_all_approvers (bool): [optional]  # noqa: E501
            allow_release_items_from_other_documents (bool): [optional]  # noqa: E501
            automatically_obsolete_previous_released_revisions (bool): [optional]  # noqa: E501
            part_numbering_scheme_id (str): [optional]  # noqa: E501
            require_peer_review (bool): [optional]  # noqa: E501
            drawing_can_duplicate_part_number (bool): [optional]  # noqa: E501
            enabled_active_multiple_workflows (bool): [optional]  # noqa: E501
            use_company_features_toolbar (bool): [optional]  # noqa: E501
            only_admins_can_mark_objects_as_not_revision_managed (bool): [optional]  # noqa: E501
        """

        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        for var_name, var_value in six.iteritems(kwargs):
            setattr(self, var_name, var_value)
