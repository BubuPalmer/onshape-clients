# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    The version of the OpenAPI document: 1.108
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import
import re  # noqa: F401
import sys  # noqa: F401

import six  # noqa: F401

from onshape_client.oas.model_utils import (  # noqa: F401
    ModelComposed,
    ModelNormal,
    ModelSimple,
    date,
    datetime,
    file_type,
    int,
    none_type,
    str,
    validate_get_composed_info,
)
try:
    from onshape_client.oas.models import bt_bounding_box1052
except ImportError:
    bt_bounding_box1052 = sys.modules['onshape_client.oas.models.bt_bounding_box1052']
try:
    from onshape_client.oas.models import bt_broken_out_end_condition1107
except ImportError:
    bt_broken_out_end_condition1107 = sys.modules['onshape_client.oas.models.bt_broken_out_end_condition1107']


class BTAppViewParams(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('hidden_lines',): {
            'DRAFTING': "DRAFTING",
            'EXCLUDED': "EXCLUDED",
            'MARKED': "MARKED",
        },
        ('quality_option_type',): {
            'BEST_PERFORMANCE': "BEST_PERFORMANCE",
            'BEST_QUALITY': "BEST_QUALITY",
            'BALANCED': "BALANCED",
            'ADAPTIVE': "ADAPTIVE",
        },
        ('simplification_option_type',): {
            'NONE': "NONE",
            'ABSOLUTE': "ABSOLUTE",
            'RATIO_TO_MODEL': "RATIO_TO_MODEL",
            'RATIO_TO_BODY': "RATIO_TO_BODY",
        },
    }

    validations = {
    }

    additional_properties_type = None

    @staticmethod
    def openapi_types():
        """
        This must be a class method so a model may have properties that are
        of type self, this ensures that we don't create a cyclic import

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'model_reference_id': (str,),  # noqa: E501
            'view_matrix': ([float],),  # noqa: E501
            'view_direction': ([float],),  # noqa: E501
            'cut_point': ([float],),  # noqa: E501
            'offset_section_points': ([float],),  # noqa: E501
            'broken_out_section': (bool,),  # noqa: E501
            'crop_view': (bool,),  # noqa: E501
            'bom_reference_id': (str,),  # noqa: E501
            'display_state_id': (str,),  # noqa: E501
            'include_hidden_instances': (bool,),  # noqa: E501
            'view_scale': (float,),  # noqa: E501
            'show_tangent_lines': (bool,),  # noqa: E501
            'compute_intersection': (bool,),  # noqa: E501
            'quality_option': (int,),  # noqa: E501
            'simplification_option': (int,),  # noqa: E501
            'simplification_threshold': (float,),  # noqa: E501
            'is_broken_out_section': (bool,),  # noqa: E501
            'is_crop_view': (bool,),  # noqa: E501
            'show_cut_geom_only': (bool,),  # noqa: E501
            'hidden_lines': (str,),  # noqa: E501
            'modification_id': (str,),  # noqa: E501
            'perspective': (bool,),  # noqa: E501
            'projection_angle': (str,),  # noqa: E501
            'show_threads': (bool,),  # noqa: E501
            'quality_option_type': (str,),  # noqa: E501
            'simplification_option_type': (str,),  # noqa: E501
            'is_partial_section': (bool,),  # noqa: E501
            'broken_out_point_numbers': ([int],),  # noqa: E501
            'broken_out_end_conditions': ({str: (bt_broken_out_end_condition1107.BTBrokenOutEndCondition1107,)},),  # noqa: E501
            'broken_out_b_boxes': ([float],),  # noqa: E501
            'broken_out_b_boxes_map': ({str: (bt_bounding_box1052.BTBoundingBox1052,)},),  # noqa: E501
            'include_surfaces': (bool,),  # noqa: E501
            'is_surface': (bool,),  # noqa: E501
            'depth_section_end_condition': (bt_broken_out_end_condition1107.BTBrokenOutEndCondition1107,),  # noqa: E501
            'exploded_view_id': (str,),  # noqa: E501
            'occurrence_or_part_id_to_geometry_properties': ({str: ({str: (str,)},)},),  # noqa: E501
            'transaction_id': (str,),  # noqa: E501
            'parent_change_id': (str,),  # noqa: E501
            'parameters': ([float],),  # noqa: E501
        }

    @staticmethod
    def discriminator():
        return None

    attribute_map = {
        'model_reference_id': 'modelReferenceId',  # noqa: E501
        'view_matrix': 'viewMatrix',  # noqa: E501
        'view_direction': 'viewDirection',  # noqa: E501
        'cut_point': 'cutPoint',  # noqa: E501
        'offset_section_points': 'offsetSectionPoints',  # noqa: E501
        'broken_out_section': 'brokenOutSection',  # noqa: E501
        'crop_view': 'cropView',  # noqa: E501
        'bom_reference_id': 'bomReferenceId',  # noqa: E501
        'display_state_id': 'displayStateId',  # noqa: E501
        'include_hidden_instances': 'includeHiddenInstances',  # noqa: E501
        'view_scale': 'viewScale',  # noqa: E501
        'show_tangent_lines': 'showTangentLines',  # noqa: E501
        'compute_intersection': 'computeIntersection',  # noqa: E501
        'quality_option': 'qualityOption',  # noqa: E501
        'simplification_option': 'simplificationOption',  # noqa: E501
        'simplification_threshold': 'simplificationThreshold',  # noqa: E501
        'is_broken_out_section': 'isBrokenOutSection',  # noqa: E501
        'is_crop_view': 'isCropView',  # noqa: E501
        'show_cut_geom_only': 'showCutGeomOnly',  # noqa: E501
        'hidden_lines': 'hiddenLines',  # noqa: E501
        'modification_id': 'modificationId',  # noqa: E501
        'perspective': 'perspective',  # noqa: E501
        'projection_angle': 'projectionAngle',  # noqa: E501
        'show_threads': 'showThreads',  # noqa: E501
        'quality_option_type': 'qualityOptionType',  # noqa: E501
        'simplification_option_type': 'simplificationOptionType',  # noqa: E501
        'is_partial_section': 'isPartialSection',  # noqa: E501
        'broken_out_point_numbers': 'brokenOutPointNumbers',  # noqa: E501
        'broken_out_end_conditions': 'brokenOutEndConditions',  # noqa: E501
        'broken_out_b_boxes': 'brokenOutBBoxes',  # noqa: E501
        'broken_out_b_boxes_map': 'brokenOutBBoxesMap',  # noqa: E501
        'include_surfaces': 'includeSurfaces',  # noqa: E501
        'is_surface': 'isSurface',  # noqa: E501
        'depth_section_end_condition': 'depthSectionEndCondition',  # noqa: E501
        'exploded_view_id': 'explodedViewId',  # noqa: E501
        'occurrence_or_part_id_to_geometry_properties': 'occurrenceOrPartIdToGeometryProperties',  # noqa: E501
        'transaction_id': 'transactionId',  # noqa: E501
        'parent_change_id': 'parentChangeId',  # noqa: E501
        'parameters': 'parameters',  # noqa: E501
    }

    @staticmethod
    def _composed_schemas():
        return None

    required_properties = set([
        '_data_store',
        '_check_type',
        '_from_server',
        '_path_to_item',
        '_configuration',
    ])

    def __init__(self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, **kwargs):  # noqa: E501
        """bt_app_view_params.BTAppViewParams - a model defined in OpenAPI


        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _from_server (bool): True if the data is from the server
                                False if the data is from the client (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            model_reference_id (str): [optional]  # noqa: E501
            view_matrix ([float]): [optional]  # noqa: E501
            view_direction ([float]): [optional]  # noqa: E501
            cut_point ([float]): [optional]  # noqa: E501
            offset_section_points ([float]): [optional]  # noqa: E501
            broken_out_section (bool): [optional]  # noqa: E501
            crop_view (bool): [optional]  # noqa: E501
            bom_reference_id (str): [optional]  # noqa: E501
            display_state_id (str): [optional]  # noqa: E501
            include_hidden_instances (bool): [optional]  # noqa: E501
            view_scale (float): [optional]  # noqa: E501
            show_tangent_lines (bool): [optional]  # noqa: E501
            compute_intersection (bool): [optional]  # noqa: E501
            quality_option (int): [optional]  # noqa: E501
            simplification_option (int): [optional]  # noqa: E501
            simplification_threshold (float): [optional]  # noqa: E501
            is_broken_out_section (bool): [optional]  # noqa: E501
            is_crop_view (bool): [optional]  # noqa: E501
            show_cut_geom_only (bool): [optional]  # noqa: E501
            hidden_lines (str): [optional]  # noqa: E501
            modification_id (str): [optional]  # noqa: E501
            perspective (bool): [optional]  # noqa: E501
            projection_angle (str): [optional]  # noqa: E501
            show_threads (bool): [optional]  # noqa: E501
            quality_option_type (str): [optional]  # noqa: E501
            simplification_option_type (str): [optional]  # noqa: E501
            is_partial_section (bool): [optional]  # noqa: E501
            broken_out_point_numbers ([int]): [optional]  # noqa: E501
            broken_out_end_conditions ({str: (bt_broken_out_end_condition1107.BTBrokenOutEndCondition1107,)}): [optional]  # noqa: E501
            broken_out_b_boxes ([float]): [optional]  # noqa: E501
            broken_out_b_boxes_map ({str: (bt_bounding_box1052.BTBoundingBox1052,)}): [optional]  # noqa: E501
            include_surfaces (bool): [optional]  # noqa: E501
            is_surface (bool): [optional]  # noqa: E501
            depth_section_end_condition (bt_broken_out_end_condition1107.BTBrokenOutEndCondition1107): [optional]  # noqa: E501
            exploded_view_id (str): [optional]  # noqa: E501
            occurrence_or_part_id_to_geometry_properties ({str: ({str: (str,)},)}): [optional]  # noqa: E501
            transaction_id (str): [optional]  # noqa: E501
            parent_change_id (str): [optional]  # noqa: E501
            parameters ([float]): [optional]  # noqa: E501
        """

        self._data_store = {}
        self._check_type = _check_type
        self._from_server = _from_server
        self._path_to_item = _path_to_item
        self._configuration = _configuration

        for var_name, var_value in six.iteritems(kwargs):
            setattr(self, var_name, var_value)
